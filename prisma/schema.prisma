// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npm install @prisma/client

// => for everytime updating schema.
// npx prisma migrate dev --name init
// npx prisma generate

// # 
//Create a migration using prisma migrate dev --create-only.
//Edit the generated .sql file and add the above statement.
//Run prisma migrate dev.
//ALTER TABLE table_name AUTO_INCREMENT = 0;

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  // user info
  email_google String @unique
  token_google String
  user_name String @unique
  password String
  // fixed variables
  age Int
  sex String
  // half-fixed variables
  height Float
  arm_length String
  leg_length String

  trainingProgram TrainingProgram[]
  trainingProgramRec TrainingProgramRec[]
}

model Manager {
  id Int @default(autoincrement()) @id
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  manager_name String @unique
  password String
}

// Models about Program
model TrainingProgramType {
  id Int @default(autoincrement()) @id
  type String @unique

  trainingProgram TrainingProgram[]
}
model TrainingProgram {
  id Int @default(autoincrement()) @id
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  trainingProgramType TrainingProgramType @relation(fields: [type_id], references: [id])
  type_id Int

  user User @relation(fields: [ author ], references: [id])
  author Int

  name String @unique
  description String

  programVector ProgramVector? @relation(fields: [vector], references: [id])
  vector Int? @unique

  trainingProgramRecs TrainingProgramRec[]

  weekRoutines WeekRoutine[]
}
model TrainingProgramRec {
  id Int @default(autoincrement()) @id
  program TrainingProgram @relation(fields: [program_id], references: [id])
  program_id Int

  user User @relation(fields: [user_id], references: [id])
  user_id Int

  start DateTime
  end DateTime

  comment String

  weight Float
  fat_rate Float

  squat Float
  benchpress Float
  deadlift Float

  weekRoutineRecs WeekRoutineRec[]
  }
model ProgramVector {
  id Int @default(autoincrement()) @id
  trainingProgram TrainingProgram?
  c0 Int
  c1 Int
  c2 Int
  c3 Int
  c4 Int

  c5 Int?
  c6 Int?
  c7 Int?
  c8 Int?
  c9 Int?
}
// Models about Routine
model WeekRoutine {
  id Int @default(autoincrement()) @id
  program TrainingProgram @relation(fields: [program_id], references: [id])
  program_id Int

  description String

  order Int @unique

  weekRoutineRecs WeekRoutineRec[]

  dayRoutines DayRoutine[]
}
model WeekRoutineRec {
  id Int @default(autoincrement()) @id
  weekRoutine WeekRoutine @relation(fields: [week_routine_id], references: [id])
  week_routine_id Int

  programRec TrainingProgramRec @relation(fields: [program_id], references: [id])
  program_id Int

  comment String

  weight Float
  fat_rate Float

  squat Float
  benchpress Float
  deadlift Float

  dayRoutineRecs DayRoutineRec[]
}
model DayRoutine {
  id Int @default(autoincrement()) @id
  
  weekRoutine WeekRoutine @relation(fields: [week_routine_id], references: [id])
  week_routine_id Int

  order Int @unique
  exercise Exercise @relation(fields: [exercise_id], references: [id])
  exercise_id Int
  reps Int

  description String
}
model DayRoutineRec {
  id Int @default(autoincrement()) @id

  weekRoutineRec WeekRoutineRec @relation(fields: [week_routine_id], references: [id])
  week_routine_id Int

  the_day DateTime
  reps Int

  comment String
}
// Models about Exercise
model ExerciseType {
  id Int @default(autoincrement()) @id
  type String @unique
  description String

  exercises Exercise[]
}
model Exercise {
  id Int @default(autoincrement()) @id
  exerciseType ExerciseType @relation(fields: [type_id], references: [id])
  type_id Int

  name String @unique
  description String
  dayRoutines DayRoutine[]
}
