package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"hus-auth/api/auth"
	"hus-auth/common/hus"
	"hus-auth/db"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"

	_ "github.com/go-sql-driver/mysql"

	_ "hus-auth/docs" // docs is generated by Swag CLI, you have to import it.

	echoSwagger "github.com/swaggo/echo-swagger"

	echoadapter "github.com/awslabs/aws-lambda-go-api-proxy/echo"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
)

var echoLambda *echoadapter.EchoLambda

// @title Project-Hus auth server
// @version 0.0.0
// @description This is Project-Hus's root authentication server containing each user's UUID, which is unique for all hus services.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.url lifthus531@gmail.com
// @contact.email lifthus531@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host lifthus.com
// @BasePath /auth
func init() {
	fmt.Println("YOYOYO")
	fmt.Println(os.Getenv("HUS_DB_HOST"))

	// set .env
	//err = godotenv.Load()
	//if err != nil {
	//	log.Fatalf("loading .env file failed : %s", err)
	//}

	// connecting to hus_auth_db with ent
	dbClient, err := db.ConnectToHusAuth()
	if err != nil {
		log.Fatal("%w", err)
	}
	defer dbClient.Close()

	// Run the auto migration tool.
	if err := dbClient.Schema.Create(context.Background()); err != nil {
		log.Fatalf("creating schema resources failed : %v", err)
	}

	// Initialize Hus common variables
	hus.InitHusVars(os.Getenv("GOENV"), dbClient)

	// subdomains
	hosts := map[string]*Host{}

	//  Create echo web server instance and set CORS headers
	e := echo.New()
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		// If your Backend is deployed in AWS and using API Gateway to call through,
		// then all these headers need to be applied in API Gateway level also.
		AllowOrigins: hus.Origins,
		AllowHeaders: []string{
			echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept, echo.HeaderAuthorization,
		},
		AllowCredentials: true,
		AllowMethods: []string{
			http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete, http.MethodOptions, http.MethodPatch,
		},
	}))

	/* authApi, which controls auth all over the services */
	// create new http.Client for authApi
	authHttpClient := &http.Client{
		Timeout: time.Second * 5,
	}

	authApiControllerParams := auth.AuthApiControllerParams{
		DbClient:   dbClient,
		HttpClient: authHttpClient,
	}

	authApi := auth.NewAuthApiController(authApiControllerParams)
	hosts["localhost:9090"] = &Host{Echo: authApi} // gonna use auth.cloudhus.com later
	// get requset and process by its subdomain
	e.Any("/*", func(c echo.Context) (err error) {
		req, res := c.Request(), c.Response()
		host, ok := hosts[req.Host] // if the host is not registered, it will be nil.
		if !ok {
			return c.NoContent(http.StatusNotFound)
		} else {
			host.Echo.ServeHTTP(res, req)
		}
		return err
	})

	// provide api docs with swagger 2.0
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	echoLambda = echoadapter.New(e)

	// Run the server
	//e.Logger.Fatal(e.Start(":9090"))
}

type Host struct {
	Echo *echo.Echo
}

func Handler(ctx context.Context, req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	return echoLambda.ProxyWithContext(ctx, req)
}

func main() {
	lambda.Start(Handler)
}
