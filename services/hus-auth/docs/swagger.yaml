basePath: /auth
host: auth.cloudhus.com
info:
  contact:
    email: lifthus531@gmail.com
    name: API Support
    url: https://github.com/lifthus
  description: This is Cloudhus's root authentication server.
  license:
    name: MIT
    url: '-'
  termsOfService: http://swagger.io/terms/
  title: Cloudhus auth server
  version: 0.0.0
paths:
  /hussession:
    get:
      description: |-
        this endpoint can be used both for Cloudhus and subservices.
        if the subservice redirects the client to this endpoint with service name, session id and redirect url, its session will be connected to Hus session.
        and if fallback url is given, it will redirect to fallback url if it fails.
        but if they are not given, it will just respond rather than redirecting.
        note that all urls must be url-encoded using QueryEscape in net/url package.
      parameters:
      - description: subservice name
        in: query
        name: service
        type: string
      - description: subservice session id
        in: query
        name: sid
        type: string
      - description: redirect url
        in: query
        name: redirect
        type: string
      - description: fallback url
        in: query
        name: fallback
        type: string
      responses:
        "200":
          description: Ok, validated and connected
        "201":
          description: Created, new Hus session connected
        "303":
          description: See Other, redirection
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: checks and issues the Hus session token
      tags:
      - auth
  /hussession/{token}:
    get:
      parameters:
      - description: service name, session ID in signed token which expires only in
          10 seconds
        in: path
        name: token
        required: true
        type: string
      responses:
        "200":
          description: Ok, session has been connected
        "400":
          description: Bad Request
        "404":
          description: Not Found, no such connected session
        "500":
          description: Internal Server Error
      summary: gets connection token from subservice and returns Hus session ID and
        user info
      tags:
      - auth
  /session/check/{service}/{sid}:
    post:
      description: |-
        checks the service and sid and tells the subservice server that the client is signed in.
        after the subservice server updates the session and responds with 200,
        Hus auth server also reponds with 200 to the client.
      parameters:
      - description: subservice name
        in: path
        name: service
        required: true
        type: string
      - description: session id
        in: path
        name: sid
        required: true
        type: string
      responses:
        "200":
          description: Ok, theclient now should go to subservice's signing endpoint
        "401":
          description: Unauthorized, the client is not signed in
        "404":
          description: Not Found, the service is not registered
        "500":
          description: Internal Server Error
      summary: chekcs the service and sid and tells the subservice server that the
        client is signed in.
      tags:
      - auth
  /session/revoke:
    delete:
      description: can be used to sign out.
      parameters:
      - description: Hus session tokens in cookie
        in: header
        name: jwt
        type: string
      responses:
        "200":
          description: Ok
        "500":
          description: doesn't have to be handled
      summary: revokes every hus session in cookie from database.
      tags:
      - auth
  /social/google:
    post:
      consumes:
      - application/json
      description: |-
        validates the google ID token and do some authentication stuff.
        And redirects the user back to the subservice after the process.
      parameters:
      - description: url to be redirected after authentication
        in: query
        name: redirect
        required: true
        type: string
      - description: url to be redirected if the authentication fails
        in: query
        name: fallback
        type: string
      - description: Google ID token
        in: body
        name: credential
        required: true
        schema:
          type: string
      responses:
        "301":
          description: to /auth/{token_string} or to /error
      summary: gets and processes Google ID token and redirects the user back to the
        subservice.
      tags:
      - auth
  /social/google/{subservice_name}:
    post:
      consumes:
      - application/json
      description: |-
        validates the google ID token and redirects with hus refresh token to /auth/{token_string}.
        the refresh token will be expired in 7 days.
      parameters:
      - description: subservice name
        in: path
        name: subservice_name
        required: true
        type: string
      - description: Google ID token
        in: body
        name: jwt
        required: true
        schema:
          type: string
      responses:
        "301":
          description: to /auth/{token_string} or to /error
      summary: gets google IDtoken and redirect with hus session cookie.
      tags:
      - auth
swagger: "2.0"
