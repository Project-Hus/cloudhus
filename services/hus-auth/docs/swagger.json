{
    "swagger": "2.0",
    "info": {
        "description": "This is Cloudhus's root authentication server.",
        "title": "Cloudhus auth server",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/lifthus",
            "email": "lifthus531@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "-"
        },
        "version": "0.0.0"
    },
    "host": "auth.cloudhus.com",
    "basePath": "/auth",
    "paths": {
        "/hus": {
            "get": {
                "description": "this endpoint can be used both for Cloudhus and subservices.\nif the subservice redirects the client to this endpoint with service name, session id and redirect url, its session will be connected to Hus session.\nand if fallback url is given, it will redirect to fallback url if it fails.\nnote that all urls must be url-encoded.",
                "tags": [
                    "auth"
                ],
                "summary": "checks and issues the Hus session token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "subservice name",
                        "name": "service",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "redirect url",
                        "name": "redirect",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "fallback url",
                        "name": "fallback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "subservice session id",
                        "name": "sid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "303": {
                        "description": "See Other, redirection"
                    }
                }
            }
        },
        "/hus/connect/{token}": {
            "get": {
                "description": "the token has properties pps, service and sid.",
                "tags": [
                    "auth"
                ],
                "summary": "gets connection token from subservice and returns Hus session ID and user info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "pps, service name, session ID in signed token which expires only in 10 seconds",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok, session has been connected"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found, no such connected session"
                    }
                }
            }
        },
        "/hus/sign/social/google": {
            "post": {
                "description": "validates the google ID token and do some authentication stuff.\nand redirects the user back to the given redirect url after the process is done.\nnote that all urls must be url-encoded.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "gets and processes Google ID token and redirects the user back to the given redirect url.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "url to be redirected after authentication",
                        "name": "redirect",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "url to be redirected if the authentication fails",
                        "name": "fallback",
                        "in": "query"
                    },
                    {
                        "description": "Google ID token",
                        "name": "credential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "See Other"
                    }
                }
            }
        },
        "/hus/signout": {
            "patch": {
                "description": "there are two types of signout process.\n1) sign out sessions related only to given hus session.\n2) sign out all related sessions to the user.",
                "tags": [
                    "auth"
                ],
                "summary": "gets signout token from subservice and does signout process.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "sign out token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok, session has been signed out"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    }
}