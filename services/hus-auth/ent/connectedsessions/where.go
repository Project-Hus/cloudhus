// Code generated by ent, DO NOT EDIT.

package connectedsessions

import (
	"hus-auth/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldLTE(FieldID, id))
}

// Hsid applies equality check predicate on the "hsid" field. It's identical to HsidEQ.
func Hsid(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEQ(FieldHsid, v))
}

// ServiceOrigin applies equality check predicate on the "service_origin" field. It's identical to ServiceOriginEQ.
func ServiceOrigin(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEQ(FieldServiceOrigin, v))
}

// Csid applies equality check predicate on the "csid" field. It's identical to CsidEQ.
func Csid(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEQ(FieldCsid, v))
}

// HsidEQ applies the EQ predicate on the "hsid" field.
func HsidEQ(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEQ(FieldHsid, v))
}

// HsidNEQ applies the NEQ predicate on the "hsid" field.
func HsidNEQ(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldNEQ(FieldHsid, v))
}

// HsidIn applies the In predicate on the "hsid" field.
func HsidIn(vs ...uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldIn(FieldHsid, vs...))
}

// HsidNotIn applies the NotIn predicate on the "hsid" field.
func HsidNotIn(vs ...uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldNotIn(FieldHsid, vs...))
}

// ServiceOriginEQ applies the EQ predicate on the "service_origin" field.
func ServiceOriginEQ(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEQ(FieldServiceOrigin, v))
}

// ServiceOriginNEQ applies the NEQ predicate on the "service_origin" field.
func ServiceOriginNEQ(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldNEQ(FieldServiceOrigin, v))
}

// ServiceOriginIn applies the In predicate on the "service_origin" field.
func ServiceOriginIn(vs ...string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldIn(FieldServiceOrigin, vs...))
}

// ServiceOriginNotIn applies the NotIn predicate on the "service_origin" field.
func ServiceOriginNotIn(vs ...string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldNotIn(FieldServiceOrigin, vs...))
}

// ServiceOriginGT applies the GT predicate on the "service_origin" field.
func ServiceOriginGT(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldGT(FieldServiceOrigin, v))
}

// ServiceOriginGTE applies the GTE predicate on the "service_origin" field.
func ServiceOriginGTE(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldGTE(FieldServiceOrigin, v))
}

// ServiceOriginLT applies the LT predicate on the "service_origin" field.
func ServiceOriginLT(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldLT(FieldServiceOrigin, v))
}

// ServiceOriginLTE applies the LTE predicate on the "service_origin" field.
func ServiceOriginLTE(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldLTE(FieldServiceOrigin, v))
}

// ServiceOriginContains applies the Contains predicate on the "service_origin" field.
func ServiceOriginContains(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldContains(FieldServiceOrigin, v))
}

// ServiceOriginHasPrefix applies the HasPrefix predicate on the "service_origin" field.
func ServiceOriginHasPrefix(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldHasPrefix(FieldServiceOrigin, v))
}

// ServiceOriginHasSuffix applies the HasSuffix predicate on the "service_origin" field.
func ServiceOriginHasSuffix(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldHasSuffix(FieldServiceOrigin, v))
}

// ServiceOriginEqualFold applies the EqualFold predicate on the "service_origin" field.
func ServiceOriginEqualFold(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEqualFold(FieldServiceOrigin, v))
}

// ServiceOriginContainsFold applies the ContainsFold predicate on the "service_origin" field.
func ServiceOriginContainsFold(v string) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldContainsFold(FieldServiceOrigin, v))
}

// CsidEQ applies the EQ predicate on the "csid" field.
func CsidEQ(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldEQ(FieldCsid, v))
}

// CsidNEQ applies the NEQ predicate on the "csid" field.
func CsidNEQ(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldNEQ(FieldCsid, v))
}

// CsidIn applies the In predicate on the "csid" field.
func CsidIn(vs ...uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldIn(FieldCsid, vs...))
}

// CsidNotIn applies the NotIn predicate on the "csid" field.
func CsidNotIn(vs ...uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldNotIn(FieldCsid, vs...))
}

// CsidGT applies the GT predicate on the "csid" field.
func CsidGT(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldGT(FieldCsid, v))
}

// CsidGTE applies the GTE predicate on the "csid" field.
func CsidGTE(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldGTE(FieldCsid, v))
}

// CsidLT applies the LT predicate on the "csid" field.
func CsidLT(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldLT(FieldCsid, v))
}

// CsidLTE applies the LTE predicate on the "csid" field.
func CsidLTE(v uuid.UUID) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(sql.FieldLTE(FieldCsid, v))
}

// HasHusSession applies the HasEdge predicate on the "hus_session" edge.
func HasHusSession() predicate.ConnectedSessions {
	return predicate.ConnectedSessions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HusSessionTable, HusSessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHusSessionWith applies the HasEdge predicate on the "hus_session" edge with a given conditions (other predicates).
func HasHusSessionWith(preds ...predicate.HusSession) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HusSessionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HusSessionTable, HusSessionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConnectedSessions) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConnectedSessions) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConnectedSessions) predicate.ConnectedSessions {
	return predicate.ConnectedSessions(func(s *sql.Selector) {
		p(s.Not())
	})
}
