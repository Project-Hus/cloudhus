// Code generated by ent, DO NOT EDIT.

package connectedsession

import (
	"hus-auth/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldLTE(FieldID, id))
}

// Hsid applies equality check predicate on the "hsid" field. It's identical to HsidEQ.
func Hsid(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEQ(FieldHsid, v))
}

// Service applies equality check predicate on the "service" field. It's identical to ServiceEQ.
func Service(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEQ(FieldService, v))
}

// Csid applies equality check predicate on the "csid" field. It's identical to CsidEQ.
func Csid(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEQ(FieldCsid, v))
}

// HsidEQ applies the EQ predicate on the "hsid" field.
func HsidEQ(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEQ(FieldHsid, v))
}

// HsidNEQ applies the NEQ predicate on the "hsid" field.
func HsidNEQ(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldNEQ(FieldHsid, v))
}

// HsidIn applies the In predicate on the "hsid" field.
func HsidIn(vs ...uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldIn(FieldHsid, vs...))
}

// HsidNotIn applies the NotIn predicate on the "hsid" field.
func HsidNotIn(vs ...uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldNotIn(FieldHsid, vs...))
}

// ServiceEQ applies the EQ predicate on the "service" field.
func ServiceEQ(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEQ(FieldService, v))
}

// ServiceNEQ applies the NEQ predicate on the "service" field.
func ServiceNEQ(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldNEQ(FieldService, v))
}

// ServiceIn applies the In predicate on the "service" field.
func ServiceIn(vs ...string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldIn(FieldService, vs...))
}

// ServiceNotIn applies the NotIn predicate on the "service" field.
func ServiceNotIn(vs ...string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldNotIn(FieldService, vs...))
}

// ServiceGT applies the GT predicate on the "service" field.
func ServiceGT(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldGT(FieldService, v))
}

// ServiceGTE applies the GTE predicate on the "service" field.
func ServiceGTE(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldGTE(FieldService, v))
}

// ServiceLT applies the LT predicate on the "service" field.
func ServiceLT(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldLT(FieldService, v))
}

// ServiceLTE applies the LTE predicate on the "service" field.
func ServiceLTE(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldLTE(FieldService, v))
}

// ServiceContains applies the Contains predicate on the "service" field.
func ServiceContains(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldContains(FieldService, v))
}

// ServiceHasPrefix applies the HasPrefix predicate on the "service" field.
func ServiceHasPrefix(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldHasPrefix(FieldService, v))
}

// ServiceHasSuffix applies the HasSuffix predicate on the "service" field.
func ServiceHasSuffix(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldHasSuffix(FieldService, v))
}

// ServiceEqualFold applies the EqualFold predicate on the "service" field.
func ServiceEqualFold(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEqualFold(FieldService, v))
}

// ServiceContainsFold applies the ContainsFold predicate on the "service" field.
func ServiceContainsFold(v string) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldContainsFold(FieldService, v))
}

// CsidEQ applies the EQ predicate on the "csid" field.
func CsidEQ(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldEQ(FieldCsid, v))
}

// CsidNEQ applies the NEQ predicate on the "csid" field.
func CsidNEQ(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldNEQ(FieldCsid, v))
}

// CsidIn applies the In predicate on the "csid" field.
func CsidIn(vs ...uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldIn(FieldCsid, vs...))
}

// CsidNotIn applies the NotIn predicate on the "csid" field.
func CsidNotIn(vs ...uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldNotIn(FieldCsid, vs...))
}

// CsidGT applies the GT predicate on the "csid" field.
func CsidGT(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldGT(FieldCsid, v))
}

// CsidGTE applies the GTE predicate on the "csid" field.
func CsidGTE(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldGTE(FieldCsid, v))
}

// CsidLT applies the LT predicate on the "csid" field.
func CsidLT(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldLT(FieldCsid, v))
}

// CsidLTE applies the LTE predicate on the "csid" field.
func CsidLTE(v uuid.UUID) predicate.ConnectedSession {
	return predicate.ConnectedSession(sql.FieldLTE(FieldCsid, v))
}

// HasHusSession applies the HasEdge predicate on the "hus_session" edge.
func HasHusSession() predicate.ConnectedSession {
	return predicate.ConnectedSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HusSessionTable, HusSessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHusSessionWith applies the HasEdge predicate on the "hus_session" edge with a given conditions (other predicates).
func HasHusSessionWith(preds ...predicate.HusSession) predicate.ConnectedSession {
	return predicate.ConnectedSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HusSessionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HusSessionTable, HusSessionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConnectedSession) predicate.ConnectedSession {
	return predicate.ConnectedSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConnectedSession) predicate.ConnectedSession {
	return predicate.ConnectedSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConnectedSession) predicate.ConnectedSession {
	return predicate.ConnectedSession(func(s *sql.Selector) {
		p(s.Not())
	})
}
