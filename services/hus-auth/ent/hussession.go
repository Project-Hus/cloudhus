// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hus-auth/ent/hussession"
	"hus-auth/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// HusSession is the model entity for the HusSession schema.
type HusSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"sid,omitempty"`
	// Tid holds the value of the "tid" field.
	Tid uuid.UUID `json:"tid,omitempty"`
	// Iat holds the value of the "iat" field.
	Iat time.Time `json:"iat,omitempty"`
	// Preserved holds the value of the "preserved" field.
	Preserved bool `json:"preserved,omitempty"`
	// UID holds the value of the "uid" field.
	UID *uint64 `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HusSessionQuery when eager-loading is set.
	Edges HusSessionEdges `json:"edges"`
}

// HusSessionEdges holds the relations/edges for other nodes in the graph.
type HusSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HusSessionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HusSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hussession.FieldPreserved:
			values[i] = new(sql.NullBool)
		case hussession.FieldUID:
			values[i] = new(sql.NullInt64)
		case hussession.FieldIat, hussession.FieldCreatedAt, hussession.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case hussession.FieldID, hussession.FieldTid:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HusSession", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HusSession fields.
func (hs *HusSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hussession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hs.ID = *value
			}
		case hussession.FieldTid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tid", values[i])
			} else if value != nil {
				hs.Tid = *value
			}
		case hussession.FieldIat:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field iat", values[i])
			} else if value.Valid {
				hs.Iat = value.Time
			}
		case hussession.FieldPreserved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field preserved", values[i])
			} else if value.Valid {
				hs.Preserved = value.Bool
			}
		case hussession.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				hs.UID = new(uint64)
				*hs.UID = uint64(value.Int64)
			}
		case hussession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hs.CreatedAt = value.Time
			}
		case hussession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hs.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the HusSession entity.
func (hs *HusSession) QueryUser() *UserQuery {
	return NewHusSessionClient(hs.config).QueryUser(hs)
}

// Update returns a builder for updating this HusSession.
// Note that you need to call HusSession.Unwrap() before calling this method if this HusSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (hs *HusSession) Update() *HusSessionUpdateOne {
	return NewHusSessionClient(hs.config).UpdateOne(hs)
}

// Unwrap unwraps the HusSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hs *HusSession) Unwrap() *HusSession {
	_tx, ok := hs.config.driver.(*txDriver)
	if !ok {
		panic("ent: HusSession is not a transactional entity")
	}
	hs.config.driver = _tx.drv
	return hs
}

// String implements the fmt.Stringer.
func (hs *HusSession) String() string {
	var builder strings.Builder
	builder.WriteString("HusSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hs.ID))
	builder.WriteString("tid=")
	builder.WriteString(fmt.Sprintf("%v", hs.Tid))
	builder.WriteString(", ")
	builder.WriteString("iat=")
	builder.WriteString(hs.Iat.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("preserved=")
	builder.WriteString(fmt.Sprintf("%v", hs.Preserved))
	builder.WriteString(", ")
	if v := hs.UID; v != nil {
		builder.WriteString("uid=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// HusSessions is a parsable slice of HusSession.
type HusSessions []*HusSession
