// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hus-auth/ent/connectedsession"
	"hus-auth/ent/hussession"
	"hus-auth/ent/predicate"
	"hus-auth/ent/user"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeConnectedSession = "ConnectedSession"
	TypeHusSession       = "HusSession"
	TypeUser             = "User"
)

// ConnectedSessionMutation represents an operation that mutates the ConnectedSession nodes in the graph.
type ConnectedSessionMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	service            *string
	csid               *uuid.UUID
	clearedFields      map[string]struct{}
	hus_session        *uuid.UUID
	clearedhus_session bool
	done               bool
	oldValue           func(context.Context) (*ConnectedSession, error)
	predicates         []predicate.ConnectedSession
}

var _ ent.Mutation = (*ConnectedSessionMutation)(nil)

// connectedsessionOption allows management of the mutation configuration using functional options.
type connectedsessionOption func(*ConnectedSessionMutation)

// newConnectedSessionMutation creates new mutation for the ConnectedSession entity.
func newConnectedSessionMutation(c config, op Op, opts ...connectedsessionOption) *ConnectedSessionMutation {
	m := &ConnectedSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeConnectedSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConnectedSessionID sets the ID field of the mutation.
func withConnectedSessionID(id int) connectedsessionOption {
	return func(m *ConnectedSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *ConnectedSession
		)
		m.oldValue = func(ctx context.Context) (*ConnectedSession, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ConnectedSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConnectedSession sets the old ConnectedSession of the mutation.
func withConnectedSession(node *ConnectedSession) connectedsessionOption {
	return func(m *ConnectedSessionMutation) {
		m.oldValue = func(context.Context) (*ConnectedSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConnectedSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConnectedSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConnectedSessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConnectedSessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ConnectedSession.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHsid sets the "hsid" field.
func (m *ConnectedSessionMutation) SetHsid(u uuid.UUID) {
	m.hus_session = &u
}

// Hsid returns the value of the "hsid" field in the mutation.
func (m *ConnectedSessionMutation) Hsid() (r uuid.UUID, exists bool) {
	v := m.hus_session
	if v == nil {
		return
	}
	return *v, true
}

// OldHsid returns the old "hsid" field's value of the ConnectedSession entity.
// If the ConnectedSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectedSessionMutation) OldHsid(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHsid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHsid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHsid: %w", err)
	}
	return oldValue.Hsid, nil
}

// ResetHsid resets all changes to the "hsid" field.
func (m *ConnectedSessionMutation) ResetHsid() {
	m.hus_session = nil
}

// SetService sets the "service" field.
func (m *ConnectedSessionMutation) SetService(s string) {
	m.service = &s
}

// Service returns the value of the "service" field in the mutation.
func (m *ConnectedSessionMutation) Service() (r string, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldService returns the old "service" field's value of the ConnectedSession entity.
// If the ConnectedSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectedSessionMutation) OldService(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldService is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldService requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldService: %w", err)
	}
	return oldValue.Service, nil
}

// ResetService resets all changes to the "service" field.
func (m *ConnectedSessionMutation) ResetService() {
	m.service = nil
}

// SetCsid sets the "csid" field.
func (m *ConnectedSessionMutation) SetCsid(u uuid.UUID) {
	m.csid = &u
}

// Csid returns the value of the "csid" field in the mutation.
func (m *ConnectedSessionMutation) Csid() (r uuid.UUID, exists bool) {
	v := m.csid
	if v == nil {
		return
	}
	return *v, true
}

// OldCsid returns the old "csid" field's value of the ConnectedSession entity.
// If the ConnectedSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectedSessionMutation) OldCsid(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCsid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCsid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCsid: %w", err)
	}
	return oldValue.Csid, nil
}

// ResetCsid resets all changes to the "csid" field.
func (m *ConnectedSessionMutation) ResetCsid() {
	m.csid = nil
}

// SetHusSessionID sets the "hus_session" edge to the HusSession entity by id.
func (m *ConnectedSessionMutation) SetHusSessionID(id uuid.UUID) {
	m.hus_session = &id
}

// ClearHusSession clears the "hus_session" edge to the HusSession entity.
func (m *ConnectedSessionMutation) ClearHusSession() {
	m.clearedhus_session = true
}

// HusSessionCleared reports if the "hus_session" edge to the HusSession entity was cleared.
func (m *ConnectedSessionMutation) HusSessionCleared() bool {
	return m.clearedhus_session
}

// HusSessionID returns the "hus_session" edge ID in the mutation.
func (m *ConnectedSessionMutation) HusSessionID() (id uuid.UUID, exists bool) {
	if m.hus_session != nil {
		return *m.hus_session, true
	}
	return
}

// HusSessionIDs returns the "hus_session" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HusSessionID instead. It exists only for internal usage by the builders.
func (m *ConnectedSessionMutation) HusSessionIDs() (ids []uuid.UUID) {
	if id := m.hus_session; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHusSession resets all changes to the "hus_session" edge.
func (m *ConnectedSessionMutation) ResetHusSession() {
	m.hus_session = nil
	m.clearedhus_session = false
}

// Where appends a list predicates to the ConnectedSessionMutation builder.
func (m *ConnectedSessionMutation) Where(ps ...predicate.ConnectedSession) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ConnectedSessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ConnectedSessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ConnectedSession, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ConnectedSessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ConnectedSessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ConnectedSession).
func (m *ConnectedSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConnectedSessionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.hus_session != nil {
		fields = append(fields, connectedsession.FieldHsid)
	}
	if m.service != nil {
		fields = append(fields, connectedsession.FieldService)
	}
	if m.csid != nil {
		fields = append(fields, connectedsession.FieldCsid)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConnectedSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case connectedsession.FieldHsid:
		return m.Hsid()
	case connectedsession.FieldService:
		return m.Service()
	case connectedsession.FieldCsid:
		return m.Csid()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConnectedSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case connectedsession.FieldHsid:
		return m.OldHsid(ctx)
	case connectedsession.FieldService:
		return m.OldService(ctx)
	case connectedsession.FieldCsid:
		return m.OldCsid(ctx)
	}
	return nil, fmt.Errorf("unknown ConnectedSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConnectedSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case connectedsession.FieldHsid:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHsid(v)
		return nil
	case connectedsession.FieldService:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetService(v)
		return nil
	case connectedsession.FieldCsid:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCsid(v)
		return nil
	}
	return fmt.Errorf("unknown ConnectedSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConnectedSessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConnectedSessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConnectedSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ConnectedSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConnectedSessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConnectedSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConnectedSessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ConnectedSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConnectedSessionMutation) ResetField(name string) error {
	switch name {
	case connectedsession.FieldHsid:
		m.ResetHsid()
		return nil
	case connectedsession.FieldService:
		m.ResetService()
		return nil
	case connectedsession.FieldCsid:
		m.ResetCsid()
		return nil
	}
	return fmt.Errorf("unknown ConnectedSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConnectedSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.hus_session != nil {
		edges = append(edges, connectedsession.EdgeHusSession)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConnectedSessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case connectedsession.EdgeHusSession:
		if id := m.hus_session; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConnectedSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConnectedSessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConnectedSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhus_session {
		edges = append(edges, connectedsession.EdgeHusSession)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConnectedSessionMutation) EdgeCleared(name string) bool {
	switch name {
	case connectedsession.EdgeHusSession:
		return m.clearedhus_session
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConnectedSessionMutation) ClearEdge(name string) error {
	switch name {
	case connectedsession.EdgeHusSession:
		m.ClearHusSession()
		return nil
	}
	return fmt.Errorf("unknown ConnectedSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConnectedSessionMutation) ResetEdge(name string) error {
	switch name {
	case connectedsession.EdgeHusSession:
		m.ResetHusSession()
		return nil
	}
	return fmt.Errorf("unknown ConnectedSession edge %s", name)
}

// HusSessionMutation represents an operation that mutates the HusSession nodes in the graph.
type HusSessionMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	tid                      *uuid.UUID
	iat                      *time.Time
	exp                      *int64
	addexp                   *int64
	preserved                *bool
	signed_at                *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	user                     *uint64
	cleareduser              bool
	connected_session        map[int]struct{}
	removedconnected_session map[int]struct{}
	clearedconnected_session bool
	done                     bool
	oldValue                 func(context.Context) (*HusSession, error)
	predicates               []predicate.HusSession
}

var _ ent.Mutation = (*HusSessionMutation)(nil)

// hussessionOption allows management of the mutation configuration using functional options.
type hussessionOption func(*HusSessionMutation)

// newHusSessionMutation creates new mutation for the HusSession entity.
func newHusSessionMutation(c config, op Op, opts ...hussessionOption) *HusSessionMutation {
	m := &HusSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeHusSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHusSessionID sets the ID field of the mutation.
func withHusSessionID(id uuid.UUID) hussessionOption {
	return func(m *HusSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *HusSession
		)
		m.oldValue = func(ctx context.Context) (*HusSession, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HusSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHusSession sets the old HusSession of the mutation.
func withHusSession(node *HusSession) hussessionOption {
	return func(m *HusSessionMutation) {
		m.oldValue = func(context.Context) (*HusSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HusSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HusSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HusSession entities.
func (m *HusSessionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HusSessionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HusSessionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HusSession.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTid sets the "tid" field.
func (m *HusSessionMutation) SetTid(u uuid.UUID) {
	m.tid = &u
}

// Tid returns the value of the "tid" field in the mutation.
func (m *HusSessionMutation) Tid() (r uuid.UUID, exists bool) {
	v := m.tid
	if v == nil {
		return
	}
	return *v, true
}

// OldTid returns the old "tid" field's value of the HusSession entity.
// If the HusSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HusSessionMutation) OldTid(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTid: %w", err)
	}
	return oldValue.Tid, nil
}

// ResetTid resets all changes to the "tid" field.
func (m *HusSessionMutation) ResetTid() {
	m.tid = nil
}

// SetIat sets the "iat" field.
func (m *HusSessionMutation) SetIat(t time.Time) {
	m.iat = &t
}

// Iat returns the value of the "iat" field in the mutation.
func (m *HusSessionMutation) Iat() (r time.Time, exists bool) {
	v := m.iat
	if v == nil {
		return
	}
	return *v, true
}

// OldIat returns the old "iat" field's value of the HusSession entity.
// If the HusSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HusSessionMutation) OldIat(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIat: %w", err)
	}
	return oldValue.Iat, nil
}

// ResetIat resets all changes to the "iat" field.
func (m *HusSessionMutation) ResetIat() {
	m.iat = nil
}

// SetExp sets the "exp" field.
func (m *HusSessionMutation) SetExp(i int64) {
	m.exp = &i
	m.addexp = nil
}

// Exp returns the value of the "exp" field in the mutation.
func (m *HusSessionMutation) Exp() (r int64, exists bool) {
	v := m.exp
	if v == nil {
		return
	}
	return *v, true
}

// OldExp returns the old "exp" field's value of the HusSession entity.
// If the HusSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HusSessionMutation) OldExp(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExp: %w", err)
	}
	return oldValue.Exp, nil
}

// AddExp adds i to the "exp" field.
func (m *HusSessionMutation) AddExp(i int64) {
	if m.addexp != nil {
		*m.addexp += i
	} else {
		m.addexp = &i
	}
}

// AddedExp returns the value that was added to the "exp" field in this mutation.
func (m *HusSessionMutation) AddedExp() (r int64, exists bool) {
	v := m.addexp
	if v == nil {
		return
	}
	return *v, true
}

// ResetExp resets all changes to the "exp" field.
func (m *HusSessionMutation) ResetExp() {
	m.exp = nil
	m.addexp = nil
}

// SetPreserved sets the "preserved" field.
func (m *HusSessionMutation) SetPreserved(b bool) {
	m.preserved = &b
}

// Preserved returns the value of the "preserved" field in the mutation.
func (m *HusSessionMutation) Preserved() (r bool, exists bool) {
	v := m.preserved
	if v == nil {
		return
	}
	return *v, true
}

// OldPreserved returns the old "preserved" field's value of the HusSession entity.
// If the HusSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HusSessionMutation) OldPreserved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreserved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreserved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreserved: %w", err)
	}
	return oldValue.Preserved, nil
}

// ResetPreserved resets all changes to the "preserved" field.
func (m *HusSessionMutation) ResetPreserved() {
	m.preserved = nil
}

// SetUID sets the "uid" field.
func (m *HusSessionMutation) SetUID(u uint64) {
	m.user = &u
}

// UID returns the value of the "uid" field in the mutation.
func (m *HusSessionMutation) UID() (r uint64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the HusSession entity.
// If the HusSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HusSessionMutation) OldUID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ClearUID clears the value of the "uid" field.
func (m *HusSessionMutation) ClearUID() {
	m.user = nil
	m.clearedFields[hussession.FieldUID] = struct{}{}
}

// UIDCleared returns if the "uid" field was cleared in this mutation.
func (m *HusSessionMutation) UIDCleared() bool {
	_, ok := m.clearedFields[hussession.FieldUID]
	return ok
}

// ResetUID resets all changes to the "uid" field.
func (m *HusSessionMutation) ResetUID() {
	m.user = nil
	delete(m.clearedFields, hussession.FieldUID)
}

// SetSignedAt sets the "signed_at" field.
func (m *HusSessionMutation) SetSignedAt(t time.Time) {
	m.signed_at = &t
}

// SignedAt returns the value of the "signed_at" field in the mutation.
func (m *HusSessionMutation) SignedAt() (r time.Time, exists bool) {
	v := m.signed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSignedAt returns the old "signed_at" field's value of the HusSession entity.
// If the HusSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HusSessionMutation) OldSignedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignedAt: %w", err)
	}
	return oldValue.SignedAt, nil
}

// ClearSignedAt clears the value of the "signed_at" field.
func (m *HusSessionMutation) ClearSignedAt() {
	m.signed_at = nil
	m.clearedFields[hussession.FieldSignedAt] = struct{}{}
}

// SignedAtCleared returns if the "signed_at" field was cleared in this mutation.
func (m *HusSessionMutation) SignedAtCleared() bool {
	_, ok := m.clearedFields[hussession.FieldSignedAt]
	return ok
}

// ResetSignedAt resets all changes to the "signed_at" field.
func (m *HusSessionMutation) ResetSignedAt() {
	m.signed_at = nil
	delete(m.clearedFields, hussession.FieldSignedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *HusSessionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *HusSessionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the HusSession entity.
// If the HusSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HusSessionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *HusSessionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *HusSessionMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *HusSessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *HusSessionMutation) UserCleared() bool {
	return m.UIDCleared() || m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *HusSessionMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *HusSessionMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *HusSessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddConnectedSessionIDs adds the "connected_session" edge to the ConnectedSession entity by ids.
func (m *HusSessionMutation) AddConnectedSessionIDs(ids ...int) {
	if m.connected_session == nil {
		m.connected_session = make(map[int]struct{})
	}
	for i := range ids {
		m.connected_session[ids[i]] = struct{}{}
	}
}

// ClearConnectedSession clears the "connected_session" edge to the ConnectedSession entity.
func (m *HusSessionMutation) ClearConnectedSession() {
	m.clearedconnected_session = true
}

// ConnectedSessionCleared reports if the "connected_session" edge to the ConnectedSession entity was cleared.
func (m *HusSessionMutation) ConnectedSessionCleared() bool {
	return m.clearedconnected_session
}

// RemoveConnectedSessionIDs removes the "connected_session" edge to the ConnectedSession entity by IDs.
func (m *HusSessionMutation) RemoveConnectedSessionIDs(ids ...int) {
	if m.removedconnected_session == nil {
		m.removedconnected_session = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.connected_session, ids[i])
		m.removedconnected_session[ids[i]] = struct{}{}
	}
}

// RemovedConnectedSession returns the removed IDs of the "connected_session" edge to the ConnectedSession entity.
func (m *HusSessionMutation) RemovedConnectedSessionIDs() (ids []int) {
	for id := range m.removedconnected_session {
		ids = append(ids, id)
	}
	return
}

// ConnectedSessionIDs returns the "connected_session" edge IDs in the mutation.
func (m *HusSessionMutation) ConnectedSessionIDs() (ids []int) {
	for id := range m.connected_session {
		ids = append(ids, id)
	}
	return
}

// ResetConnectedSession resets all changes to the "connected_session" edge.
func (m *HusSessionMutation) ResetConnectedSession() {
	m.connected_session = nil
	m.clearedconnected_session = false
	m.removedconnected_session = nil
}

// Where appends a list predicates to the HusSessionMutation builder.
func (m *HusSessionMutation) Where(ps ...predicate.HusSession) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HusSessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HusSessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HusSession, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HusSessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HusSessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HusSession).
func (m *HusSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HusSessionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.tid != nil {
		fields = append(fields, hussession.FieldTid)
	}
	if m.iat != nil {
		fields = append(fields, hussession.FieldIat)
	}
	if m.exp != nil {
		fields = append(fields, hussession.FieldExp)
	}
	if m.preserved != nil {
		fields = append(fields, hussession.FieldPreserved)
	}
	if m.user != nil {
		fields = append(fields, hussession.FieldUID)
	}
	if m.signed_at != nil {
		fields = append(fields, hussession.FieldSignedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, hussession.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HusSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hussession.FieldTid:
		return m.Tid()
	case hussession.FieldIat:
		return m.Iat()
	case hussession.FieldExp:
		return m.Exp()
	case hussession.FieldPreserved:
		return m.Preserved()
	case hussession.FieldUID:
		return m.UID()
	case hussession.FieldSignedAt:
		return m.SignedAt()
	case hussession.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HusSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hussession.FieldTid:
		return m.OldTid(ctx)
	case hussession.FieldIat:
		return m.OldIat(ctx)
	case hussession.FieldExp:
		return m.OldExp(ctx)
	case hussession.FieldPreserved:
		return m.OldPreserved(ctx)
	case hussession.FieldUID:
		return m.OldUID(ctx)
	case hussession.FieldSignedAt:
		return m.OldSignedAt(ctx)
	case hussession.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown HusSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HusSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hussession.FieldTid:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTid(v)
		return nil
	case hussession.FieldIat:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIat(v)
		return nil
	case hussession.FieldExp:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExp(v)
		return nil
	case hussession.FieldPreserved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreserved(v)
		return nil
	case hussession.FieldUID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case hussession.FieldSignedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignedAt(v)
		return nil
	case hussession.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown HusSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HusSessionMutation) AddedFields() []string {
	var fields []string
	if m.addexp != nil {
		fields = append(fields, hussession.FieldExp)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HusSessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hussession.FieldExp:
		return m.AddedExp()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HusSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hussession.FieldExp:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExp(v)
		return nil
	}
	return fmt.Errorf("unknown HusSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HusSessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(hussession.FieldUID) {
		fields = append(fields, hussession.FieldUID)
	}
	if m.FieldCleared(hussession.FieldSignedAt) {
		fields = append(fields, hussession.FieldSignedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HusSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HusSessionMutation) ClearField(name string) error {
	switch name {
	case hussession.FieldUID:
		m.ClearUID()
		return nil
	case hussession.FieldSignedAt:
		m.ClearSignedAt()
		return nil
	}
	return fmt.Errorf("unknown HusSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HusSessionMutation) ResetField(name string) error {
	switch name {
	case hussession.FieldTid:
		m.ResetTid()
		return nil
	case hussession.FieldIat:
		m.ResetIat()
		return nil
	case hussession.FieldExp:
		m.ResetExp()
		return nil
	case hussession.FieldPreserved:
		m.ResetPreserved()
		return nil
	case hussession.FieldUID:
		m.ResetUID()
		return nil
	case hussession.FieldSignedAt:
		m.ResetSignedAt()
		return nil
	case hussession.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown HusSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HusSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, hussession.EdgeUser)
	}
	if m.connected_session != nil {
		edges = append(edges, hussession.EdgeConnectedSession)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HusSessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hussession.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case hussession.EdgeConnectedSession:
		ids := make([]ent.Value, 0, len(m.connected_session))
		for id := range m.connected_session {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HusSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedconnected_session != nil {
		edges = append(edges, hussession.EdgeConnectedSession)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HusSessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hussession.EdgeConnectedSession:
		ids := make([]ent.Value, 0, len(m.removedconnected_session))
		for id := range m.removedconnected_session {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HusSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, hussession.EdgeUser)
	}
	if m.clearedconnected_session {
		edges = append(edges, hussession.EdgeConnectedSession)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HusSessionMutation) EdgeCleared(name string) bool {
	switch name {
	case hussession.EdgeUser:
		return m.cleareduser
	case hussession.EdgeConnectedSession:
		return m.clearedconnected_session
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HusSessionMutation) ClearEdge(name string) error {
	switch name {
	case hussession.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown HusSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HusSessionMutation) ResetEdge(name string) error {
	switch name {
	case hussession.EdgeUser:
		m.ResetUser()
		return nil
	case hussession.EdgeConnectedSession:
		m.ResetConnectedSession()
		return nil
	}
	return fmt.Errorf("unknown HusSession edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	provider            *user.Provider
	google_sub          *string
	email               *string
	email_verified      *bool
	name                *string
	given_name          *string
	family_name         *string
	birthdate           *time.Time
	profile_image_url   *string
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	hus_sessions        map[uuid.UUID]struct{}
	removedhus_sessions map[uuid.UUID]struct{}
	clearedhus_sessions bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProvider sets the "provider" field.
func (m *UserMutation) SetProvider(u user.Provider) {
	m.provider = &u
}

// Provider returns the value of the "provider" field in the mutation.
func (m *UserMutation) Provider() (r user.Provider, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProvider(ctx context.Context) (v user.Provider, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *UserMutation) ResetProvider() {
	m.provider = nil
}

// SetGoogleSub sets the "google_sub" field.
func (m *UserMutation) SetGoogleSub(s string) {
	m.google_sub = &s
}

// GoogleSub returns the value of the "google_sub" field in the mutation.
func (m *UserMutation) GoogleSub() (r string, exists bool) {
	v := m.google_sub
	if v == nil {
		return
	}
	return *v, true
}

// OldGoogleSub returns the old "google_sub" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGoogleSub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoogleSub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoogleSub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoogleSub: %w", err)
	}
	return oldValue.GoogleSub, nil
}

// ResetGoogleSub resets all changes to the "google_sub" field.
func (m *UserMutation) ResetGoogleSub() {
	m.google_sub = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetEmailVerified sets the "email_verified" field.
func (m *UserMutation) SetEmailVerified(b bool) {
	m.email_verified = &b
}

// EmailVerified returns the value of the "email_verified" field in the mutation.
func (m *UserMutation) EmailVerified() (r bool, exists bool) {
	v := m.email_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerified returns the old "email_verified" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerified: %w", err)
	}
	return oldValue.EmailVerified, nil
}

// ResetEmailVerified resets all changes to the "email_verified" field.
func (m *UserMutation) ResetEmailVerified() {
	m.email_verified = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetGivenName sets the "given_name" field.
func (m *UserMutation) SetGivenName(s string) {
	m.given_name = &s
}

// GivenName returns the value of the "given_name" field in the mutation.
func (m *UserMutation) GivenName() (r string, exists bool) {
	v := m.given_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGivenName returns the old "given_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGivenName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGivenName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGivenName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGivenName: %w", err)
	}
	return oldValue.GivenName, nil
}

// ResetGivenName resets all changes to the "given_name" field.
func (m *UserMutation) ResetGivenName() {
	m.given_name = nil
}

// SetFamilyName sets the "family_name" field.
func (m *UserMutation) SetFamilyName(s string) {
	m.family_name = &s
}

// FamilyName returns the value of the "family_name" field in the mutation.
func (m *UserMutation) FamilyName() (r string, exists bool) {
	v := m.family_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFamilyName returns the old "family_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFamilyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamilyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamilyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamilyName: %w", err)
	}
	return oldValue.FamilyName, nil
}

// ResetFamilyName resets all changes to the "family_name" field.
func (m *UserMutation) ResetFamilyName() {
	m.family_name = nil
}

// SetBirthdate sets the "birthdate" field.
func (m *UserMutation) SetBirthdate(t time.Time) {
	m.birthdate = &t
}

// Birthdate returns the value of the "birthdate" field in the mutation.
func (m *UserMutation) Birthdate() (r time.Time, exists bool) {
	v := m.birthdate
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthdate returns the old "birthdate" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirthdate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthdate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthdate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthdate: %w", err)
	}
	return oldValue.Birthdate, nil
}

// ClearBirthdate clears the value of the "birthdate" field.
func (m *UserMutation) ClearBirthdate() {
	m.birthdate = nil
	m.clearedFields[user.FieldBirthdate] = struct{}{}
}

// BirthdateCleared returns if the "birthdate" field was cleared in this mutation.
func (m *UserMutation) BirthdateCleared() bool {
	_, ok := m.clearedFields[user.FieldBirthdate]
	return ok
}

// ResetBirthdate resets all changes to the "birthdate" field.
func (m *UserMutation) ResetBirthdate() {
	m.birthdate = nil
	delete(m.clearedFields, user.FieldBirthdate)
}

// SetProfileImageURL sets the "profile_image_url" field.
func (m *UserMutation) SetProfileImageURL(s string) {
	m.profile_image_url = &s
}

// ProfileImageURL returns the value of the "profile_image_url" field in the mutation.
func (m *UserMutation) ProfileImageURL() (r string, exists bool) {
	v := m.profile_image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileImageURL returns the old "profile_image_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProfileImageURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileImageURL: %w", err)
	}
	return oldValue.ProfileImageURL, nil
}

// ClearProfileImageURL clears the value of the "profile_image_url" field.
func (m *UserMutation) ClearProfileImageURL() {
	m.profile_image_url = nil
	m.clearedFields[user.FieldProfileImageURL] = struct{}{}
}

// ProfileImageURLCleared returns if the "profile_image_url" field was cleared in this mutation.
func (m *UserMutation) ProfileImageURLCleared() bool {
	_, ok := m.clearedFields[user.FieldProfileImageURL]
	return ok
}

// ResetProfileImageURL resets all changes to the "profile_image_url" field.
func (m *UserMutation) ResetProfileImageURL() {
	m.profile_image_url = nil
	delete(m.clearedFields, user.FieldProfileImageURL)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddHusSessionIDs adds the "hus_sessions" edge to the HusSession entity by ids.
func (m *UserMutation) AddHusSessionIDs(ids ...uuid.UUID) {
	if m.hus_sessions == nil {
		m.hus_sessions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.hus_sessions[ids[i]] = struct{}{}
	}
}

// ClearHusSessions clears the "hus_sessions" edge to the HusSession entity.
func (m *UserMutation) ClearHusSessions() {
	m.clearedhus_sessions = true
}

// HusSessionsCleared reports if the "hus_sessions" edge to the HusSession entity was cleared.
func (m *UserMutation) HusSessionsCleared() bool {
	return m.clearedhus_sessions
}

// RemoveHusSessionIDs removes the "hus_sessions" edge to the HusSession entity by IDs.
func (m *UserMutation) RemoveHusSessionIDs(ids ...uuid.UUID) {
	if m.removedhus_sessions == nil {
		m.removedhus_sessions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.hus_sessions, ids[i])
		m.removedhus_sessions[ids[i]] = struct{}{}
	}
}

// RemovedHusSessions returns the removed IDs of the "hus_sessions" edge to the HusSession entity.
func (m *UserMutation) RemovedHusSessionsIDs() (ids []uuid.UUID) {
	for id := range m.removedhus_sessions {
		ids = append(ids, id)
	}
	return
}

// HusSessionsIDs returns the "hus_sessions" edge IDs in the mutation.
func (m *UserMutation) HusSessionsIDs() (ids []uuid.UUID) {
	for id := range m.hus_sessions {
		ids = append(ids, id)
	}
	return
}

// ResetHusSessions resets all changes to the "hus_sessions" edge.
func (m *UserMutation) ResetHusSessions() {
	m.hus_sessions = nil
	m.clearedhus_sessions = false
	m.removedhus_sessions = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.provider != nil {
		fields = append(fields, user.FieldProvider)
	}
	if m.google_sub != nil {
		fields = append(fields, user.FieldGoogleSub)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.email_verified != nil {
		fields = append(fields, user.FieldEmailVerified)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.given_name != nil {
		fields = append(fields, user.FieldGivenName)
	}
	if m.family_name != nil {
		fields = append(fields, user.FieldFamilyName)
	}
	if m.birthdate != nil {
		fields = append(fields, user.FieldBirthdate)
	}
	if m.profile_image_url != nil {
		fields = append(fields, user.FieldProfileImageURL)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldProvider:
		return m.Provider()
	case user.FieldGoogleSub:
		return m.GoogleSub()
	case user.FieldEmail:
		return m.Email()
	case user.FieldEmailVerified:
		return m.EmailVerified()
	case user.FieldName:
		return m.Name()
	case user.FieldGivenName:
		return m.GivenName()
	case user.FieldFamilyName:
		return m.FamilyName()
	case user.FieldBirthdate:
		return m.Birthdate()
	case user.FieldProfileImageURL:
		return m.ProfileImageURL()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldProvider:
		return m.OldProvider(ctx)
	case user.FieldGoogleSub:
		return m.OldGoogleSub(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldEmailVerified:
		return m.OldEmailVerified(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldGivenName:
		return m.OldGivenName(ctx)
	case user.FieldFamilyName:
		return m.OldFamilyName(ctx)
	case user.FieldBirthdate:
		return m.OldBirthdate(ctx)
	case user.FieldProfileImageURL:
		return m.OldProfileImageURL(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldProvider:
		v, ok := value.(user.Provider)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case user.FieldGoogleSub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoogleSub(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldEmailVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerified(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldGivenName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGivenName(v)
		return nil
	case user.FieldFamilyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamilyName(v)
		return nil
	case user.FieldBirthdate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthdate(v)
		return nil
	case user.FieldProfileImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileImageURL(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldBirthdate) {
		fields = append(fields, user.FieldBirthdate)
	}
	if m.FieldCleared(user.FieldProfileImageURL) {
		fields = append(fields, user.FieldProfileImageURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldBirthdate:
		m.ClearBirthdate()
		return nil
	case user.FieldProfileImageURL:
		m.ClearProfileImageURL()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldProvider:
		m.ResetProvider()
		return nil
	case user.FieldGoogleSub:
		m.ResetGoogleSub()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldEmailVerified:
		m.ResetEmailVerified()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldGivenName:
		m.ResetGivenName()
		return nil
	case user.FieldFamilyName:
		m.ResetFamilyName()
		return nil
	case user.FieldBirthdate:
		m.ResetBirthdate()
		return nil
	case user.FieldProfileImageURL:
		m.ResetProfileImageURL()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.hus_sessions != nil {
		edges = append(edges, user.EdgeHusSessions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeHusSessions:
		ids := make([]ent.Value, 0, len(m.hus_sessions))
		for id := range m.hus_sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedhus_sessions != nil {
		edges = append(edges, user.EdgeHusSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeHusSessions:
		ids := make([]ent.Value, 0, len(m.removedhus_sessions))
		for id := range m.removedhus_sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhus_sessions {
		edges = append(edges, user.EdgeHusSessions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeHusSessions:
		return m.clearedhus_sessions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeHusSessions:
		m.ResetHusSessions()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
