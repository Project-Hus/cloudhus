// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hus-auth/ent/connectedsessions"
	"hus-auth/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConnectedSessionsUpdate is the builder for updating ConnectedSessions entities.
type ConnectedSessionsUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectedSessionsMutation
}

// Where appends a list predicates to the ConnectedSessionsUpdate builder.
func (csu *ConnectedSessionsUpdate) Where(ps ...predicate.ConnectedSessions) *ConnectedSessionsUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetHsid sets the "hsid" field.
func (csu *ConnectedSessionsUpdate) SetHsid(u uuid.UUID) *ConnectedSessionsUpdate {
	csu.mutation.SetHsid(u)
	return csu
}

// SetCsid sets the "csid" field.
func (csu *ConnectedSessionsUpdate) SetCsid(u uuid.UUID) *ConnectedSessionsUpdate {
	csu.mutation.SetCsid(u)
	return csu
}

// Mutation returns the ConnectedSessionsMutation object of the builder.
func (csu *ConnectedSessionsUpdate) Mutation() *ConnectedSessionsMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ConnectedSessionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ConnectedSessionsMutation](ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ConnectedSessionsUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ConnectedSessionsUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ConnectedSessionsUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *ConnectedSessionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(connectedsessions.Table, connectedsessions.Columns, sqlgraph.NewFieldSpec(connectedsessions.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Hsid(); ok {
		_spec.SetField(connectedsessions.FieldHsid, field.TypeUUID, value)
	}
	if value, ok := csu.mutation.Csid(); ok {
		_spec.SetField(connectedsessions.FieldCsid, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectedsessions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ConnectedSessionsUpdateOne is the builder for updating a single ConnectedSessions entity.
type ConnectedSessionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectedSessionsMutation
}

// SetHsid sets the "hsid" field.
func (csuo *ConnectedSessionsUpdateOne) SetHsid(u uuid.UUID) *ConnectedSessionsUpdateOne {
	csuo.mutation.SetHsid(u)
	return csuo
}

// SetCsid sets the "csid" field.
func (csuo *ConnectedSessionsUpdateOne) SetCsid(u uuid.UUID) *ConnectedSessionsUpdateOne {
	csuo.mutation.SetCsid(u)
	return csuo
}

// Mutation returns the ConnectedSessionsMutation object of the builder.
func (csuo *ConnectedSessionsUpdateOne) Mutation() *ConnectedSessionsMutation {
	return csuo.mutation
}

// Where appends a list predicates to the ConnectedSessionsUpdate builder.
func (csuo *ConnectedSessionsUpdateOne) Where(ps ...predicate.ConnectedSessions) *ConnectedSessionsUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ConnectedSessionsUpdateOne) Select(field string, fields ...string) *ConnectedSessionsUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated ConnectedSessions entity.
func (csuo *ConnectedSessionsUpdateOne) Save(ctx context.Context) (*ConnectedSessions, error) {
	return withHooks[*ConnectedSessions, ConnectedSessionsMutation](ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ConnectedSessionsUpdateOne) SaveX(ctx context.Context) *ConnectedSessions {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ConnectedSessionsUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ConnectedSessionsUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *ConnectedSessionsUpdateOne) sqlSave(ctx context.Context) (_node *ConnectedSessions, err error) {
	_spec := sqlgraph.NewUpdateSpec(connectedsessions.Table, connectedsessions.Columns, sqlgraph.NewFieldSpec(connectedsessions.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectedSessions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectedsessions.FieldID)
		for _, f := range fields {
			if !connectedsessions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectedsessions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Hsid(); ok {
		_spec.SetField(connectedsessions.FieldHsid, field.TypeUUID, value)
	}
	if value, ok := csuo.mutation.Csid(); ok {
		_spec.SetField(connectedsessions.FieldCsid, field.TypeUUID, value)
	}
	_node = &ConnectedSessions{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectedsessions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
