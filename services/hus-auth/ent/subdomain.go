// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hus-auth/ent/service"
	"hus-auth/ent/subdomain"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Subdomain is the model entity for the Subdomain schema.
type Subdomain struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ServiceID holds the value of the "service_id" field.
	ServiceID int `json:"service_id,omitempty"`
	// Subdomain holds the value of the "subdomain" field.
	Subdomain string `json:"subdomain,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubdomainQuery when eager-loading is set.
	Edges SubdomainEdges `json:"edges"`
}

// SubdomainEdges holds the relations/edges for other nodes in the graph.
type SubdomainEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubdomainEdges) ServiceOrErr() (*Service, error) {
	if e.loadedTypes[0] {
		if e.Service == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: service.Label}
		}
		return e.Service, nil
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subdomain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subdomain.FieldID, subdomain.FieldServiceID:
			values[i] = new(sql.NullInt64)
		case subdomain.FieldSubdomain, subdomain.FieldRole:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Subdomain", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subdomain fields.
func (s *Subdomain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subdomain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case subdomain.FieldServiceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field service_id", values[i])
			} else if value.Valid {
				s.ServiceID = int(value.Int64)
			}
		case subdomain.FieldSubdomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subdomain", values[i])
			} else if value.Valid {
				s.Subdomain = value.String
			}
		case subdomain.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				s.Role = value.String
			}
		}
	}
	return nil
}

// QueryService queries the "service" edge of the Subdomain entity.
func (s *Subdomain) QueryService() *ServiceQuery {
	return NewSubdomainClient(s.config).QueryService(s)
}

// Update returns a builder for updating this Subdomain.
// Note that you need to call Subdomain.Unwrap() before calling this method if this Subdomain
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subdomain) Update() *SubdomainUpdateOne {
	return NewSubdomainClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subdomain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subdomain) Unwrap() *Subdomain {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subdomain is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subdomain) String() string {
	var builder strings.Builder
	builder.WriteString("Subdomain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("service_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ServiceID))
	builder.WriteString(", ")
	builder.WriteString("subdomain=")
	builder.WriteString(s.Subdomain)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(s.Role)
	builder.WriteByte(')')
	return builder.String()
}

// Subdomains is a parsable slice of Subdomain.
type Subdomains []*Subdomain
