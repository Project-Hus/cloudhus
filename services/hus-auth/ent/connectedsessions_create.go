// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hus-auth/ent/connectedsessions"
	"hus-auth/ent/hussession"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConnectedSessionsCreate is the builder for creating a ConnectedSessions entity.
type ConnectedSessionsCreate struct {
	config
	mutation *ConnectedSessionsMutation
	hooks    []Hook
}

// SetHsid sets the "hsid" field.
func (csc *ConnectedSessionsCreate) SetHsid(u uuid.UUID) *ConnectedSessionsCreate {
	csc.mutation.SetHsid(u)
	return csc
}

// SetService sets the "service" field.
func (csc *ConnectedSessionsCreate) SetService(s string) *ConnectedSessionsCreate {
	csc.mutation.SetService(s)
	return csc
}

// SetCsid sets the "csid" field.
func (csc *ConnectedSessionsCreate) SetCsid(u uuid.UUID) *ConnectedSessionsCreate {
	csc.mutation.SetCsid(u)
	return csc
}

// SetHusSessionID sets the "hus_session" edge to the HusSession entity by ID.
func (csc *ConnectedSessionsCreate) SetHusSessionID(id uuid.UUID) *ConnectedSessionsCreate {
	csc.mutation.SetHusSessionID(id)
	return csc
}

// SetHusSession sets the "hus_session" edge to the HusSession entity.
func (csc *ConnectedSessionsCreate) SetHusSession(h *HusSession) *ConnectedSessionsCreate {
	return csc.SetHusSessionID(h.ID)
}

// Mutation returns the ConnectedSessionsMutation object of the builder.
func (csc *ConnectedSessionsCreate) Mutation() *ConnectedSessionsMutation {
	return csc.mutation
}

// Save creates the ConnectedSessions in the database.
func (csc *ConnectedSessionsCreate) Save(ctx context.Context) (*ConnectedSessions, error) {
	return withHooks[*ConnectedSessions, ConnectedSessionsMutation](ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ConnectedSessionsCreate) SaveX(ctx context.Context) *ConnectedSessions {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ConnectedSessionsCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ConnectedSessionsCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ConnectedSessionsCreate) check() error {
	if _, ok := csc.mutation.Hsid(); !ok {
		return &ValidationError{Name: "hsid", err: errors.New(`ent: missing required field "ConnectedSessions.hsid"`)}
	}
	if _, ok := csc.mutation.Service(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required field "ConnectedSessions.service"`)}
	}
	if _, ok := csc.mutation.Csid(); !ok {
		return &ValidationError{Name: "csid", err: errors.New(`ent: missing required field "ConnectedSessions.csid"`)}
	}
	if _, ok := csc.mutation.HusSessionID(); !ok {
		return &ValidationError{Name: "hus_session", err: errors.New(`ent: missing required edge "ConnectedSessions.hus_session"`)}
	}
	return nil
}

func (csc *ConnectedSessionsCreate) sqlSave(ctx context.Context) (*ConnectedSessions, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ConnectedSessionsCreate) createSpec() (*ConnectedSessions, *sqlgraph.CreateSpec) {
	var (
		_node = &ConnectedSessions{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(connectedsessions.Table, sqlgraph.NewFieldSpec(connectedsessions.FieldID, field.TypeInt))
	)
	if value, ok := csc.mutation.Service(); ok {
		_spec.SetField(connectedsessions.FieldService, field.TypeString, value)
		_node.Service = value
	}
	if value, ok := csc.mutation.Csid(); ok {
		_spec.SetField(connectedsessions.FieldCsid, field.TypeUUID, value)
		_node.Csid = value
	}
	if nodes := csc.mutation.HusSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connectedsessions.HusSessionTable,
			Columns: []string{connectedsessions.HusSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hussession.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Hsid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConnectedSessionsCreateBulk is the builder for creating many ConnectedSessions entities in bulk.
type ConnectedSessionsCreateBulk struct {
	config
	builders []*ConnectedSessionsCreate
}

// Save creates the ConnectedSessions entities in the database.
func (cscb *ConnectedSessionsCreateBulk) Save(ctx context.Context) ([]*ConnectedSessions, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ConnectedSessions, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectedSessionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ConnectedSessionsCreateBulk) SaveX(ctx context.Context) []*ConnectedSessions {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ConnectedSessionsCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ConnectedSessionsCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
