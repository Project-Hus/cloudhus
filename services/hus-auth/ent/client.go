// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"hus-auth/ent/migrate"

	"hus-auth/ent/connectedsessions"
	"hus-auth/ent/hussession"
	"hus-auth/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ConnectedSessions is the client for interacting with the ConnectedSessions builders.
	ConnectedSessions *ConnectedSessionsClient
	// HusSession is the client for interacting with the HusSession builders.
	HusSession *HusSessionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ConnectedSessions = NewConnectedSessionsClient(c.config)
	c.HusSession = NewHusSessionClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		ConnectedSessions: NewConnectedSessionsClient(cfg),
		HusSession:        NewHusSessionClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		ConnectedSessions: NewConnectedSessionsClient(cfg),
		HusSession:        NewHusSessionClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ConnectedSessions.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ConnectedSessions.Use(hooks...)
	c.HusSession.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ConnectedSessions.Intercept(interceptors...)
	c.HusSession.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ConnectedSessionsMutation:
		return c.ConnectedSessions.mutate(ctx, m)
	case *HusSessionMutation:
		return c.HusSession.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ConnectedSessionsClient is a client for the ConnectedSessions schema.
type ConnectedSessionsClient struct {
	config
}

// NewConnectedSessionsClient returns a client for the ConnectedSessions from the given config.
func NewConnectedSessionsClient(c config) *ConnectedSessionsClient {
	return &ConnectedSessionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connectedsessions.Hooks(f(g(h())))`.
func (c *ConnectedSessionsClient) Use(hooks ...Hook) {
	c.hooks.ConnectedSessions = append(c.hooks.ConnectedSessions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connectedsessions.Intercept(f(g(h())))`.
func (c *ConnectedSessionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConnectedSessions = append(c.inters.ConnectedSessions, interceptors...)
}

// Create returns a builder for creating a ConnectedSessions entity.
func (c *ConnectedSessionsClient) Create() *ConnectedSessionsCreate {
	mutation := newConnectedSessionsMutation(c.config, OpCreate)
	return &ConnectedSessionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConnectedSessions entities.
func (c *ConnectedSessionsClient) CreateBulk(builders ...*ConnectedSessionsCreate) *ConnectedSessionsCreateBulk {
	return &ConnectedSessionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConnectedSessions.
func (c *ConnectedSessionsClient) Update() *ConnectedSessionsUpdate {
	mutation := newConnectedSessionsMutation(c.config, OpUpdate)
	return &ConnectedSessionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectedSessionsClient) UpdateOne(cs *ConnectedSessions) *ConnectedSessionsUpdateOne {
	mutation := newConnectedSessionsMutation(c.config, OpUpdateOne, withConnectedSessions(cs))
	return &ConnectedSessionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectedSessionsClient) UpdateOneID(id int) *ConnectedSessionsUpdateOne {
	mutation := newConnectedSessionsMutation(c.config, OpUpdateOne, withConnectedSessionsID(id))
	return &ConnectedSessionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConnectedSessions.
func (c *ConnectedSessionsClient) Delete() *ConnectedSessionsDelete {
	mutation := newConnectedSessionsMutation(c.config, OpDelete)
	return &ConnectedSessionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectedSessionsClient) DeleteOne(cs *ConnectedSessions) *ConnectedSessionsDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectedSessionsClient) DeleteOneID(id int) *ConnectedSessionsDeleteOne {
	builder := c.Delete().Where(connectedsessions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectedSessionsDeleteOne{builder}
}

// Query returns a query builder for ConnectedSessions.
func (c *ConnectedSessionsClient) Query() *ConnectedSessionsQuery {
	return &ConnectedSessionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnectedSessions},
		inters: c.Interceptors(),
	}
}

// Get returns a ConnectedSessions entity by its id.
func (c *ConnectedSessionsClient) Get(ctx context.Context, id int) (*ConnectedSessions, error) {
	return c.Query().Where(connectedsessions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectedSessionsClient) GetX(ctx context.Context, id int) *ConnectedSessions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConnectedSessionsClient) Hooks() []Hook {
	return c.hooks.ConnectedSessions
}

// Interceptors returns the client interceptors.
func (c *ConnectedSessionsClient) Interceptors() []Interceptor {
	return c.inters.ConnectedSessions
}

func (c *ConnectedSessionsClient) mutate(ctx context.Context, m *ConnectedSessionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectedSessionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectedSessionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectedSessionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectedSessionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConnectedSessions mutation op: %q", m.Op())
	}
}

// HusSessionClient is a client for the HusSession schema.
type HusSessionClient struct {
	config
}

// NewHusSessionClient returns a client for the HusSession from the given config.
func NewHusSessionClient(c config) *HusSessionClient {
	return &HusSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hussession.Hooks(f(g(h())))`.
func (c *HusSessionClient) Use(hooks ...Hook) {
	c.hooks.HusSession = append(c.hooks.HusSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hussession.Intercept(f(g(h())))`.
func (c *HusSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.HusSession = append(c.inters.HusSession, interceptors...)
}

// Create returns a builder for creating a HusSession entity.
func (c *HusSessionClient) Create() *HusSessionCreate {
	mutation := newHusSessionMutation(c.config, OpCreate)
	return &HusSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HusSession entities.
func (c *HusSessionClient) CreateBulk(builders ...*HusSessionCreate) *HusSessionCreateBulk {
	return &HusSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HusSession.
func (c *HusSessionClient) Update() *HusSessionUpdate {
	mutation := newHusSessionMutation(c.config, OpUpdate)
	return &HusSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HusSessionClient) UpdateOne(hs *HusSession) *HusSessionUpdateOne {
	mutation := newHusSessionMutation(c.config, OpUpdateOne, withHusSession(hs))
	return &HusSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HusSessionClient) UpdateOneID(id uuid.UUID) *HusSessionUpdateOne {
	mutation := newHusSessionMutation(c.config, OpUpdateOne, withHusSessionID(id))
	return &HusSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HusSession.
func (c *HusSessionClient) Delete() *HusSessionDelete {
	mutation := newHusSessionMutation(c.config, OpDelete)
	return &HusSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HusSessionClient) DeleteOne(hs *HusSession) *HusSessionDeleteOne {
	return c.DeleteOneID(hs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HusSessionClient) DeleteOneID(id uuid.UUID) *HusSessionDeleteOne {
	builder := c.Delete().Where(hussession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HusSessionDeleteOne{builder}
}

// Query returns a query builder for HusSession.
func (c *HusSessionClient) Query() *HusSessionQuery {
	return &HusSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHusSession},
		inters: c.Interceptors(),
	}
}

// Get returns a HusSession entity by its id.
func (c *HusSessionClient) Get(ctx context.Context, id uuid.UUID) (*HusSession, error) {
	return c.Query().Where(hussession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HusSessionClient) GetX(ctx context.Context, id uuid.UUID) *HusSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a HusSession.
func (c *HusSessionClient) QueryUser(hs *HusSession) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hussession.Table, hussession.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hussession.UserTable, hussession.UserColumn),
		)
		fromV = sqlgraph.Neighbors(hs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HusSessionClient) Hooks() []Hook {
	return c.hooks.HusSession
}

// Interceptors returns the client interceptors.
func (c *HusSessionClient) Interceptors() []Interceptor {
	return c.inters.HusSession
}

func (c *HusSessionClient) mutate(ctx context.Context, m *HusSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HusSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HusSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HusSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HusSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HusSession mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uint64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHusSessions queries the hus_sessions edge of a User.
func (c *UserClient) QueryHusSessions(u *User) *HusSessionQuery {
	query := (&HusSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hussession.Table, hussession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HusSessionsTable, user.HusSessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}
