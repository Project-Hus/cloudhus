package main

import (
	"log"
	"net/http"
	"os"
	"time"

	"hus-auth/api/auth"
	"hus-auth/db"
	"hus-auth/middleware"

	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"

	_ "github.com/go-sql-driver/mysql"

	_ "hus-auth/docs" // docs is generated by Swag CLI, you have to import it.

	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title Project-Hus auth server
// @version 0.0.0
// @description This is Project-Hus's root authentication server containing each user's UUID, which is unique for all hus services.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.url lifthus531@gmail.com
// @contact.email lifthus531@gmail.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host lifthus.com
// @BasePath /auth
func main() {
	now := time.Now().Format("01-02-15-04-05-2006")

	// set all logs to be stored in log{now}.txt
	f, err := os.OpenFile("log"+now+".txt", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("error opening file: %v", err)
	}
	defer f.Close()
	log.SetOutput(f)

	log.Println("starting Hus auth server...")

	// set .env
	err = godotenv.Load() // now you can use os.Getenv("VAR_NAME")
	if err != nil {
		log.Fatalf("Error lading .env file: %s", err)
	}

	// connecting to hus_auth_db with ent
	client, err := db.ConnectToHusAuth()
	if err != nil {
		log.Fatal("%w", err)
	}
	defer client.Close()

	// Set Controller
	// hosts (such like subdomains)
	hosts := map[string]*Host{}

	// gonna use api.lifthus.com later and api.project-hus.com more later
	authApi := auth.NewAuthApiController(client)
	hosts["localhost:9090"] = &Host{Echo: authApi}

	e := echo.New()
	// set CORS headers
	e.Use(middleware.SetHusCorsHeaders)
	// get requset and process by its subdomain
	e.Any("/*", func(c echo.Context) (err error) {
		req := c.Request()
		res := c.Response()
		host := hosts[req.Host] // if the host is not registered, it will be nil.
		if host == nil {
			err = echo.ErrNotFound
		} else {
			host.Echo.ServeHTTP(res, req)
		}
		return err
	})

	// provide api docs with swagger
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// for all unhandled requests, send 404 response with handler by closure
	e.Use(func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			return c.NoContent(http.StatusNotFound)
		}
	})

	// Run the server
	e.Logger.Fatal(e.Start(":9090"))
}

type Host struct {
	Echo *echo.Echo
}
