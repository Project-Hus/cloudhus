// Code generated by ent, DO NOT EDIT.

package hussession

import (
	"hus-auth/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldLTE(FieldID, id))
}

// Iat applies equality check predicate on the "iat" field. It's identical to IatEQ.
func Iat(v time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldEQ(FieldIat, v))
}

// Exp applies equality check predicate on the "exp" field. It's identical to ExpEQ.
func Exp(v bool) predicate.HusSession {
	return predicate.HusSession(sql.FieldEQ(FieldExp, v))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldEQ(FieldUID, v))
}

// IatEQ applies the EQ predicate on the "iat" field.
func IatEQ(v time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldEQ(FieldIat, v))
}

// IatNEQ applies the NEQ predicate on the "iat" field.
func IatNEQ(v time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldNEQ(FieldIat, v))
}

// IatIn applies the In predicate on the "iat" field.
func IatIn(vs ...time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldIn(FieldIat, vs...))
}

// IatNotIn applies the NotIn predicate on the "iat" field.
func IatNotIn(vs ...time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldNotIn(FieldIat, vs...))
}

// IatGT applies the GT predicate on the "iat" field.
func IatGT(v time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldGT(FieldIat, v))
}

// IatGTE applies the GTE predicate on the "iat" field.
func IatGTE(v time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldGTE(FieldIat, v))
}

// IatLT applies the LT predicate on the "iat" field.
func IatLT(v time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldLT(FieldIat, v))
}

// IatLTE applies the LTE predicate on the "iat" field.
func IatLTE(v time.Time) predicate.HusSession {
	return predicate.HusSession(sql.FieldLTE(FieldIat, v))
}

// ExpEQ applies the EQ predicate on the "exp" field.
func ExpEQ(v bool) predicate.HusSession {
	return predicate.HusSession(sql.FieldEQ(FieldExp, v))
}

// ExpNEQ applies the NEQ predicate on the "exp" field.
func ExpNEQ(v bool) predicate.HusSession {
	return predicate.HusSession(sql.FieldNEQ(FieldExp, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...uuid.UUID) predicate.HusSession {
	return predicate.HusSession(sql.FieldNotIn(FieldUID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.HusSession {
	return predicate.HusSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.HusSession {
	return predicate.HusSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HusSession) predicate.HusSession {
	return predicate.HusSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HusSession) predicate.HusSession {
	return predicate.HusSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HusSession) predicate.HusSession {
	return predicate.HusSession(func(s *sql.Selector) {
		p(s.Not())
	})
}
