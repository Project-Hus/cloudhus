// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hus-auth/ent/predicate"
	"hus-auth/ent/service"
	"hus-auth/ent/subdomain"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubdomainUpdate is the builder for updating Subdomain entities.
type SubdomainUpdate struct {
	config
	hooks    []Hook
	mutation *SubdomainMutation
}

// Where appends a list predicates to the SubdomainUpdate builder.
func (su *SubdomainUpdate) Where(ps ...predicate.Subdomain) *SubdomainUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetServiceID sets the "service_id" field.
func (su *SubdomainUpdate) SetServiceID(i int) *SubdomainUpdate {
	su.mutation.SetServiceID(i)
	return su
}

// SetSubdomain sets the "subdomain" field.
func (su *SubdomainUpdate) SetSubdomain(s string) *SubdomainUpdate {
	su.mutation.SetSubdomain(s)
	return su
}

// SetURL sets the "url" field.
func (su *SubdomainUpdate) SetURL(s string) *SubdomainUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetService sets the "service" edge to the Service entity.
func (su *SubdomainUpdate) SetService(s *Service) *SubdomainUpdate {
	return su.SetServiceID(s.ID)
}

// Mutation returns the SubdomainMutation object of the builder.
func (su *SubdomainUpdate) Mutation() *SubdomainMutation {
	return su.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (su *SubdomainUpdate) ClearService() *SubdomainUpdate {
	su.mutation.ClearService()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubdomainUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SubdomainMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubdomainUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubdomainUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubdomainUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubdomainUpdate) check() error {
	if _, ok := su.mutation.ServiceID(); su.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subdomain.service"`)
	}
	return nil
}

func (su *SubdomainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subdomain.Table, subdomain.Columns, sqlgraph.NewFieldSpec(subdomain.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Subdomain(); ok {
		_spec.SetField(subdomain.FieldSubdomain, field.TypeString, value)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(subdomain.FieldURL, field.TypeString, value)
	}
	if su.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subdomain.ServiceTable,
			Columns: []string{subdomain.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subdomain.ServiceTable,
			Columns: []string{subdomain.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubdomainUpdateOne is the builder for updating a single Subdomain entity.
type SubdomainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubdomainMutation
}

// SetServiceID sets the "service_id" field.
func (suo *SubdomainUpdateOne) SetServiceID(i int) *SubdomainUpdateOne {
	suo.mutation.SetServiceID(i)
	return suo
}

// SetSubdomain sets the "subdomain" field.
func (suo *SubdomainUpdateOne) SetSubdomain(s string) *SubdomainUpdateOne {
	suo.mutation.SetSubdomain(s)
	return suo
}

// SetURL sets the "url" field.
func (suo *SubdomainUpdateOne) SetURL(s string) *SubdomainUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetService sets the "service" edge to the Service entity.
func (suo *SubdomainUpdateOne) SetService(s *Service) *SubdomainUpdateOne {
	return suo.SetServiceID(s.ID)
}

// Mutation returns the SubdomainMutation object of the builder.
func (suo *SubdomainUpdateOne) Mutation() *SubdomainMutation {
	return suo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (suo *SubdomainUpdateOne) ClearService() *SubdomainUpdateOne {
	suo.mutation.ClearService()
	return suo
}

// Where appends a list predicates to the SubdomainUpdate builder.
func (suo *SubdomainUpdateOne) Where(ps ...predicate.Subdomain) *SubdomainUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubdomainUpdateOne) Select(field string, fields ...string) *SubdomainUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subdomain entity.
func (suo *SubdomainUpdateOne) Save(ctx context.Context) (*Subdomain, error) {
	return withHooks[*Subdomain, SubdomainMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubdomainUpdateOne) SaveX(ctx context.Context) *Subdomain {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubdomainUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubdomainUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubdomainUpdateOne) check() error {
	if _, ok := suo.mutation.ServiceID(); suo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subdomain.service"`)
	}
	return nil
}

func (suo *SubdomainUpdateOne) sqlSave(ctx context.Context) (_node *Subdomain, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subdomain.Table, subdomain.Columns, sqlgraph.NewFieldSpec(subdomain.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subdomain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subdomain.FieldID)
		for _, f := range fields {
			if !subdomain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subdomain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Subdomain(); ok {
		_spec.SetField(subdomain.FieldSubdomain, field.TypeString, value)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(subdomain.FieldURL, field.TypeString, value)
	}
	if suo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subdomain.ServiceTable,
			Columns: []string{subdomain.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subdomain.ServiceTable,
			Columns: []string{subdomain.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subdomain{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
