// Code generated by ent, DO NOT EDIT.

package subdomain

import (
	"hus-auth/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldLTE(FieldID, id))
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldEQ(FieldServiceID, v))
}

// Subdomain applies equality check predicate on the "subdomain" field. It's identical to SubdomainEQ.
func Subdomain(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldEQ(FieldSubdomain, v))
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...int) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldNotIn(FieldServiceID, vs...))
}

// SubdomainEQ applies the EQ predicate on the "subdomain" field.
func SubdomainEQ(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldEQ(FieldSubdomain, v))
}

// SubdomainNEQ applies the NEQ predicate on the "subdomain" field.
func SubdomainNEQ(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldNEQ(FieldSubdomain, v))
}

// SubdomainIn applies the In predicate on the "subdomain" field.
func SubdomainIn(vs ...string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldIn(FieldSubdomain, vs...))
}

// SubdomainNotIn applies the NotIn predicate on the "subdomain" field.
func SubdomainNotIn(vs ...string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldNotIn(FieldSubdomain, vs...))
}

// SubdomainGT applies the GT predicate on the "subdomain" field.
func SubdomainGT(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldGT(FieldSubdomain, v))
}

// SubdomainGTE applies the GTE predicate on the "subdomain" field.
func SubdomainGTE(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldGTE(FieldSubdomain, v))
}

// SubdomainLT applies the LT predicate on the "subdomain" field.
func SubdomainLT(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldLT(FieldSubdomain, v))
}

// SubdomainLTE applies the LTE predicate on the "subdomain" field.
func SubdomainLTE(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldLTE(FieldSubdomain, v))
}

// SubdomainContains applies the Contains predicate on the "subdomain" field.
func SubdomainContains(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldContains(FieldSubdomain, v))
}

// SubdomainHasPrefix applies the HasPrefix predicate on the "subdomain" field.
func SubdomainHasPrefix(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldHasPrefix(FieldSubdomain, v))
}

// SubdomainHasSuffix applies the HasSuffix predicate on the "subdomain" field.
func SubdomainHasSuffix(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldHasSuffix(FieldSubdomain, v))
}

// SubdomainEqualFold applies the EqualFold predicate on the "subdomain" field.
func SubdomainEqualFold(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldEqualFold(FieldSubdomain, v))
}

// SubdomainContainsFold applies the ContainsFold predicate on the "subdomain" field.
func SubdomainContainsFold(v string) predicate.Subdomain {
	return predicate.Subdomain(sql.FieldContainsFold(FieldSubdomain, v))
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.Subdomain {
	return predicate.Subdomain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.Subdomain {
	return predicate.Subdomain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServiceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subdomain) predicate.Subdomain {
	return predicate.Subdomain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subdomain) predicate.Subdomain {
	return predicate.Subdomain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subdomain) predicate.Subdomain {
	return predicate.Subdomain(func(s *sql.Selector) {
		p(s.Not())
	})
}
