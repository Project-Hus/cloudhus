// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hus-auth/ent/hussession"
	"hus-auth/ent/predicate"
	"hus-auth/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HusSessionUpdate is the builder for updating HusSession entities.
type HusSessionUpdate struct {
	config
	hooks    []Hook
	mutation *HusSessionMutation
}

// Where appends a list predicates to the HusSessionUpdate builder.
func (hsu *HusSessionUpdate) Where(ps ...predicate.HusSession) *HusSessionUpdate {
	hsu.mutation.Where(ps...)
	return hsu
}

// SetExpiredAt sets the "expired_at" field.
func (hsu *HusSessionUpdate) SetExpiredAt(t time.Time) *HusSessionUpdate {
	hsu.mutation.SetExpiredAt(t)
	return hsu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (hsu *HusSessionUpdate) SetNillableExpiredAt(t *time.Time) *HusSessionUpdate {
	if t != nil {
		hsu.SetExpiredAt(*t)
	}
	return hsu
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (hsu *HusSessionUpdate) ClearExpiredAt() *HusSessionUpdate {
	hsu.mutation.ClearExpiredAt()
	return hsu
}

// SetCreatedAt sets the "created_at" field.
func (hsu *HusSessionUpdate) SetCreatedAt(t time.Time) *HusSessionUpdate {
	hsu.mutation.SetCreatedAt(t)
	return hsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hsu *HusSessionUpdate) SetNillableCreatedAt(t *time.Time) *HusSessionUpdate {
	if t != nil {
		hsu.SetCreatedAt(*t)
	}
	return hsu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hsu *HusSessionUpdate) SetOwnerID(id uuid.UUID) *HusSessionUpdate {
	hsu.mutation.SetOwnerID(id)
	return hsu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (hsu *HusSessionUpdate) SetNillableOwnerID(id *uuid.UUID) *HusSessionUpdate {
	if id != nil {
		hsu = hsu.SetOwnerID(*id)
	}
	return hsu
}

// SetOwner sets the "owner" edge to the User entity.
func (hsu *HusSessionUpdate) SetOwner(u *User) *HusSessionUpdate {
	return hsu.SetOwnerID(u.ID)
}

// Mutation returns the HusSessionMutation object of the builder.
func (hsu *HusSessionUpdate) Mutation() *HusSessionMutation {
	return hsu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (hsu *HusSessionUpdate) ClearOwner() *HusSessionUpdate {
	hsu.mutation.ClearOwner()
	return hsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hsu *HusSessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HusSessionMutation](ctx, hsu.sqlSave, hsu.mutation, hsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hsu *HusSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := hsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hsu *HusSessionUpdate) Exec(ctx context.Context) error {
	_, err := hsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsu *HusSessionUpdate) ExecX(ctx context.Context) {
	if err := hsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hsu *HusSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hussession.Table, hussession.Columns, sqlgraph.NewFieldSpec(hussession.FieldID, field.TypeUUID))
	if ps := hsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hsu.mutation.ExpiredAt(); ok {
		_spec.SetField(hussession.FieldExpiredAt, field.TypeTime, value)
	}
	if hsu.mutation.ExpiredAtCleared() {
		_spec.ClearField(hussession.FieldExpiredAt, field.TypeTime)
	}
	if value, ok := hsu.mutation.CreatedAt(); ok {
		_spec.SetField(hussession.FieldCreatedAt, field.TypeTime, value)
	}
	if hsu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hussession.OwnerTable,
			Columns: []string{hussession.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hussession.OwnerTable,
			Columns: []string{hussession.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hussession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hsu.mutation.done = true
	return n, nil
}

// HusSessionUpdateOne is the builder for updating a single HusSession entity.
type HusSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HusSessionMutation
}

// SetExpiredAt sets the "expired_at" field.
func (hsuo *HusSessionUpdateOne) SetExpiredAt(t time.Time) *HusSessionUpdateOne {
	hsuo.mutation.SetExpiredAt(t)
	return hsuo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (hsuo *HusSessionUpdateOne) SetNillableExpiredAt(t *time.Time) *HusSessionUpdateOne {
	if t != nil {
		hsuo.SetExpiredAt(*t)
	}
	return hsuo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (hsuo *HusSessionUpdateOne) ClearExpiredAt() *HusSessionUpdateOne {
	hsuo.mutation.ClearExpiredAt()
	return hsuo
}

// SetCreatedAt sets the "created_at" field.
func (hsuo *HusSessionUpdateOne) SetCreatedAt(t time.Time) *HusSessionUpdateOne {
	hsuo.mutation.SetCreatedAt(t)
	return hsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hsuo *HusSessionUpdateOne) SetNillableCreatedAt(t *time.Time) *HusSessionUpdateOne {
	if t != nil {
		hsuo.SetCreatedAt(*t)
	}
	return hsuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hsuo *HusSessionUpdateOne) SetOwnerID(id uuid.UUID) *HusSessionUpdateOne {
	hsuo.mutation.SetOwnerID(id)
	return hsuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (hsuo *HusSessionUpdateOne) SetNillableOwnerID(id *uuid.UUID) *HusSessionUpdateOne {
	if id != nil {
		hsuo = hsuo.SetOwnerID(*id)
	}
	return hsuo
}

// SetOwner sets the "owner" edge to the User entity.
func (hsuo *HusSessionUpdateOne) SetOwner(u *User) *HusSessionUpdateOne {
	return hsuo.SetOwnerID(u.ID)
}

// Mutation returns the HusSessionMutation object of the builder.
func (hsuo *HusSessionUpdateOne) Mutation() *HusSessionMutation {
	return hsuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (hsuo *HusSessionUpdateOne) ClearOwner() *HusSessionUpdateOne {
	hsuo.mutation.ClearOwner()
	return hsuo
}

// Where appends a list predicates to the HusSessionUpdate builder.
func (hsuo *HusSessionUpdateOne) Where(ps ...predicate.HusSession) *HusSessionUpdateOne {
	hsuo.mutation.Where(ps...)
	return hsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hsuo *HusSessionUpdateOne) Select(field string, fields ...string) *HusSessionUpdateOne {
	hsuo.fields = append([]string{field}, fields...)
	return hsuo
}

// Save executes the query and returns the updated HusSession entity.
func (hsuo *HusSessionUpdateOne) Save(ctx context.Context) (*HusSession, error) {
	return withHooks[*HusSession, HusSessionMutation](ctx, hsuo.sqlSave, hsuo.mutation, hsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hsuo *HusSessionUpdateOne) SaveX(ctx context.Context) *HusSession {
	node, err := hsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hsuo *HusSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := hsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsuo *HusSessionUpdateOne) ExecX(ctx context.Context) {
	if err := hsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hsuo *HusSessionUpdateOne) sqlSave(ctx context.Context) (_node *HusSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(hussession.Table, hussession.Columns, sqlgraph.NewFieldSpec(hussession.FieldID, field.TypeUUID))
	id, ok := hsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HusSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hussession.FieldID)
		for _, f := range fields {
			if !hussession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hussession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hsuo.mutation.ExpiredAt(); ok {
		_spec.SetField(hussession.FieldExpiredAt, field.TypeTime, value)
	}
	if hsuo.mutation.ExpiredAtCleared() {
		_spec.ClearField(hussession.FieldExpiredAt, field.TypeTime)
	}
	if value, ok := hsuo.mutation.CreatedAt(); ok {
		_spec.SetField(hussession.FieldCreatedAt, field.TypeTime, value)
	}
	if hsuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hussession.OwnerTable,
			Columns: []string{hussession.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hussession.OwnerTable,
			Columns: []string{hussession.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HusSession{config: hsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hussession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hsuo.mutation.done = true
	return _node, nil
}
